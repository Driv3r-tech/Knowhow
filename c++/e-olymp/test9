#include <iostream>
#include <math.h>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

int factorial(int n)
{
    int f = 1;
    for (int i = 1; i <= n; i++)
        f = f * i;
    return f;
}

int replaceDigit(int x, int d1, int d2)
{
    int result = 0, multiply = 1;

    while (x / 10 > 0)
    {
        int remainder = x % 10;
        if (remainder == d1)
            result = result + d2 * multiply;

        else
            result = result + remainder * multiply;

        multiply *= 10;
        x = x / 10;
    }

    if (x == d1)
        result = result + d2 * multiply;

    else
        result = result + x * multiply;

    return result;
}

int multDigit(int i){
    int res = 1;

     while (i / 10 > 0)
    {
        res*=(i%10);
        i /= 10;
    }
    res*=(i%10);

    return res;
}

int sumDigit(int i){
    int res = 0;

     while (i / 10 > 0)
    {
        res+=(i%10);
        i /= 10;
    }
    res+=(i%10);

    return res;
}

int main()
{
    int N,i;
    int base,denominator=1;
    vector<int> res;
    vector<string> strDigits;
    cin>>N;

    if (N == 0) cout<<"0 0";
    else if (N == 1) cout<<"10 0";
    else if (N == 2) cout<<"1 22";
    else {
        base = pow(10,N-1);
        base = replaceDigit(base,0,1);

        for(i = base+11;i < base+999;i++)
            if(multDigit(i)==sumDigit(i))
                    res.push_back(i);

        for(i=0;i<res.size();i++)
            strDigits.push_back(to_string(res[i]));

        for(i=0;i<strDigits.size();i++)
            sort(strDigits[i].begin(),strDigits[i].end());

        sort(strDigits.begin(),strDigits.end());
        strDigits.erase(unique(strDigits.begin(), strDigits.end()), strDigits.end());

        res.clear();

        for(i=0;i<strDigits.size();i++)
            res.push_back(stoi(strDigits[i]));

        base = 0;

        for(i=0;i<res.size();i++){
            vector<int> tenDigits(10,0);

            while (res[i] / 10 > 0)
            {
                tenDigits[res[i]%10]++;
                res[i] /= 10;
            }
            tenDigits[res[i]%10]++;

            for(int j=0;j<tenDigits.size();j++)
                if(tenDigits[j]!=0)
                    denominator*=factorial(tenDigits[j]);

            base+=(factorial(N)/denominator);

            denominator = 1;
            tenDigits.clear();
        }

        cout<< base <<" "<<*min_element(strDigits.begin(),strDigits.end());

    }

    return 0;
}
